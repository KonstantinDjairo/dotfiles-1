# Note on Image Previews
# For those wanting image previews, like this system, there are four steps to
# set it up. These are done automatically for LARBS users, but I will state
# them here for others doing it manually.
#
# 1. ueberzug must be installed.
# 2. The scope file (~/.config/lf/scope for me), must have a command similar to
#    mine to generate ueberzug images.
# 3. A `set cleaner` line as below is a cleaner script.
# 4. lf should be started through a wrapper script (~/.local/bin/lfub for me)
#    that creates the environment for ueberzug. This command can be be aliased
#    in your shellrc (`alias lf="lfub") or if set to a binding, should be
#    called directly instead of normal lf.

# Basic vars
set shell zsh
set shellopts '-eu:--shwordsplit' # https://github.com/gokcehan/lf/wiki/Tips#split-words-by-default-in-zsh
set ifs "\n"
set scrolloff 10
set info size
set dircounts
set icons
set period 1
set previewer '~/.config/lf/scope'
set autoquit on
set hiddenfiles ".*:*.aux:*.bbl:*.bcf:*.blg:*.run.xml"
set hidden true
set ratios 1:2:3
set cleaner '~/.config/lf/cleaner'

cmd on-cd %{{
	# Sort files by time in certain folders.
	for d in Downloads Screenshots ongoing; do
		if [[ $PWD == *"$d"* ]]; then
			lf -remote "send $id set sortby time"
		fi
	done
}}

# cmds/functions
cmd open ${{
    if [[ $f == *'.!qB' ]]; then
	# Ignore qbittorrent files. lf hangs otherwise.
	return
    fi
    case $(file --mime-type "$(readlink -f $f)" -b) in
	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) localc $fx ;;
	text/rtf|application/ms*|application/*office*|application/octet-stream|*opendocument*|*powerpoint*|application/vnd.ms*) setsid -f soffice $fx >/dev/null 2>&1 ;;
	application/vnd*|application/epub*|image/vnd.djvu|application/pdf|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
	text/troff) man ./ $fx;;
	text/*|application/json|inode/x-empty) setsid -f ${VISUAL:-geany} $fx >/dev/null 2>&1 ;;
	image/x-xcf) setsid -f gimp $fx >/dev/null 2>&1 ;;
	image/svg+xml) setsid -f display -- $fx ;;
	image/*) setsid -f lf-select $f ;;
	audio/*) mpv --audio-display=no --force-window=no $fx ;;
	video/*) setsid -f mpv $fx -quiet >/dev/null 2>&1 ;;
	application/x-rar) setsid -f file-roller $fx >/dev/null 2>&1 ;;
	application/pgp-encrypted) $EDITOR $fx ;;
	application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text) setsid -f lowriter $fx >/dev/null 2>&1 ;;
	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template) setsid -f localc $fx >/dev/null 2>&1 ;;
	application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint) setsid -f loimpress $fx >/dev/null 2>&1 ;;
	application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template) setsid -f lodraw $fx >/dev/null 2>&1 ;;
	application/vnd.oasis.opendocument.formula) setsid -f lomath $fx >/dev/null 2>&1 ;;
	application/vnd.oasis.opendocument.database) setsid -f lobase $fx >/dev/null 2>&1 ;;
	*) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done ;;
    esac
}}

# https://github.com/gokcehan/lf/wiki/Tips#commandmapping-to-create-new-directories
cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

cmd extract !{{
	if [[ $(file -b --mime-type -- "$f") == application/* ]]; then
		clear
		set -f
		tmp_file=$(mktemp -- /tmp/aunpack.XXXXXXXXXX)
		aunpack -D --save-outdir="$tmp_file" -- "$f"
		out_dir=$(cat -- "$tmp_file")
		rm -- "$tmp_file"
		[[ -d $out_dir ]] && find "$out_dir" -type f -exec chmod -x -- {} \;
	else
		echo "Not an archive."
	fi
}}

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(listmarks dirs | fzf)" &&
	[[ -n "$dest" ]] &&
	for x in $fx; do
		mv -iv -- "$x" "$dest"
	done &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(listmarks dirs | fzf)" &&
	[[ -n "$dest" ]] &&
	for x in $fx; do
		cp -ivr -- "$x" "$dest"
	done &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd editfile ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Edit what file?"
	filepath="$(listmarks files | fzf)"

	[[ -n "$filepath" ]] && "$EDITOR" "$filepath"
}}

cmd changedirectory ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Go to where?"
	dirpath="$(listmarks dirs | fzf)"

	[[ -n "$dirpath" ]] && lf -remote "send $id cd '$dirpath'"
}}

cmd quickedit ${{
	case $f in
		*.mkv|*.mp4|*.jpg|*.png|*.webp) return;;
		*) $EDITOR $f;;
	esac
}}

cmd bulkrename $vidir

# Bindings
map e quickedit
map sn :set sortby natural; set info size
map c
map cd changedirectory
map cl clear
map cf editfile
map cs $compiler $f
map d
map dd cut
map dc %du -sh $f
map <c-f> $lf -remote "send $id select \"$(fzf)\""
map D delete
map E extract
map C copyto
map M moveto
map R reload
map <c-n> push :mkdir<space>
map mk push :mkdir<space>
map r push &setsid<space>-f<space><space>$fx<left><left><left><left>
map <c-r> reload
map <c-s> set hidden!
map <enter> shell
map x $$f
map X !$f
map o &mimeopen "$f"
map O $mimeopen --ask "$f"
map y
map yy copy
map yp $echo -n "$f" | xclip -selection clipboard
map yn $echo -n "$(basename -- "$f")" | xclip -selection clipboard
map yf $echo "file://$(readlink -f -- "$f")" | xclip -selection clipboard -target "text/uri-list"
map S $clear && $SHELL
map ZG !filename="$(basename -- "$f")" && tar -I 'gzip -9' -cvf "${filename}.tar.gz" -- "$filename"
map ZD !filename="$(basename -- "$f")" && tar --zstd -cvf "${filename}.tar.zst" -- "$filename"
map m
map ms mark-save
map -x $chmod -x -- $fx
map +x $chmod +x -- $fx

# Half-moves
map K half-up
map J half-down

# New tab
map <c-t> &i3-msg layout tabbed && setsid -f i3-sensible-terminal -e lf
map <f-4> &setsid -f i3-sensible-terminal

# Ranger-like moves
map g/ cd /
map gM cd /mnt
map ge cd /etc
map gp cd /tmp
map gu cd /usr
map <insert> push %touch<space>
map gs $lf -remote "send $id select \"/mnt/archive/audio/$(mpc -f %file% | head -1)\""
map gr $lf -remote "send $id cd \"/run/media/${USER}\""

# Move to trash
cmd trash %gio trash -- $fx || trash-put -- $fx
map D trash
map <delete> trash

# cd to mountpoint
map gm $lf -remote "send $id cd '$(stat -c %m "$(pwd)")'"

map cw push A<c-u> # new rename
map ci push A<a-b><a-b><a-f> # before extension
map A rename # at the very end
map I push A<c-a> # at the very beginning
map i push A<a-b><a-b><a-f> # before extension
map a push A<a-b> # after extension
map b bulkrename
map B $setbg $f

map <c-e> down
map <c-y> up
map <c-w> quit
map V push :!nvim<space>
map L &$TERMINAL -e "nvim $fx"

map W $setsid -f $TERMINAL >/dev/null 2>&1
map Y $printf "%s" "$fx" | xclip -selection clipboard

# Move history
map H jump-prev
map L jump-next

# Source Bookmarks
source "~/.config/lf/shortcutrc"
