#!/bin/bash

set -euo pipefail

readonly anki_image_field=${MAIMPICK_ANKI_FIELD:-Image}

take_screenshot() {
	maim --hidecursor --format=png --quality 10 "$@"
}

ask_command() {
	dmenu -l 30 -i -p 'Screenshot which area?' <<-EOF
		selected area
		current window
		full screen
		selected area → clipboard
		current window → clipboard
		full screen → clipboard
		selected area → gimp
		selected area → Anki
	EOF
}

notify() {
	echo "$*"
	notify-send "Maim Pick" "$*"
}

if_installed() {
	for x in "$@"; do
		if ! which "$x" >/dev/null 2>&1 && ! pacman -Qq "$x" >/dev/null 2>&1; then
			notify "$x must be installed for this function."
			return 1
		fi
	done
}

xclip_png() {
	xclip -selection clipboard -t image/png
}

cleanup_after() {
	{ sleep "${1:?Delay is not set.}" && rm -- "${2:?File path is not set.}"; } &
}

ankiconnect_request() {
	curl --silent localhost:8765 -X POST -d "${1:?}"
}

anki_last_note_id() {
	ankiconnect_request '{
		"action": "findNotes",
		"version": 6,
		"params": {
			"query": "added:2"
		}
	}' | grep -Po '\[\K[0-9, ]+(?=\])' | sed 's|, |\n|g' | sort -g | tail -1
}

anki_store() {
	local -r path=${1:?} name=${2:?}
	local request='{
		"action": "storeMediaFile",
		"version": 6,
		"params": {
			"filename": "<NAME>",
			"path": "<PATH>"
		}
	}'
	request=${request//<NAME>/$name}
	request=${request//<PATH>/$path}
	ankiconnect_request "$request"
}

anki_update_note() {
	local -r note_id=${1:?} field=${2:?} new_content=${3//\"/\\\"}
	local request='{
		"action": "updateNoteFields",
		"version": 6,
		"params": {
			"note": {
				"id": <NOTE_ID>,
				"fields": {
					"<FIELD>": "<NEW_CONTENT>"
				}
			}
		}
	}'
	request=${request//<NOTE_ID>/$note_id}
	request=${request//<FIELD>/$field}
	request=${request//<NEW_CONTENT>/$new_content}
	ankiconnect_request "$request"
}

anki_note_content() {
	local -r note_id=${1:?} field=${2:?}
	local request='{
		"action": "notesInfo",
		"version": 6,
		"params": {
			"notes": [<NOTE_ID>]
		}
	}'
	ankiconnect_request "${request/<NOTE_ID>/$note_id}" |
		grep -Po "\"$field\":\s*{\"value\":\s*\"\K.*?(?=\",)"
}

main() {
	if_installed dmenu maim xdotool || exit 1

	local -r screenshot_dir=${MAIM_SCREENSHOTS:-$HOME/Pictures/Screenshots}
	local -r file_path=$screenshot_dir/screenshot-$(date --utc '+%F-%H-%M-%S').png

	mkdir -p -- "$screenshot_dir"

	if (($# == 0)) || [[ -z $1 ]]; then
		local -r command=$(ask_command)
	else
		local -r command=$1
	fi

	case $command in
	*area*clipboard)
		take_screenshot -s | xclip_png
		;;
	*area*gimp)
		take_screenshot -s "$file_path"
		gimp "$file_path"
		cleanup_after "60s" "$file_path"
		;;
	*area*Anki)
		take_screenshot -s "$file_path"
		anki_store "$file_path" "$(basename -- "$file_path")"
		local -r last_note_id=$(anki_last_note_id)
		local -r prev_content=$(anki_note_content "$last_note_id" "$anki_image_field")
		local -r new_content="<img src=\"$(basename -- "$file_path")\">"
		anki_update_note "$last_note_id" "$anki_image_field" "${prev_content}${new_content}"
		cleanup_after "3s" "$file_path"
		;;
	*window*clipboard)
		take_screenshot -i "$(xdotool getactivewindow)" | xclip_png
		;;
	full*clipboard)
		take_screenshot | xclip_png
		;;
	*area)
		take_screenshot -s "$file_path"
		;;
	*window)
		take_screenshot -i "$(xdotool getactivewindow)" "$file_path"
		;;
	full*)
		take_screenshot "$file_path"
		;;
	*)
		notify "No appropriate action."
		exit 1
		;;
	esac
}

main "$@"
