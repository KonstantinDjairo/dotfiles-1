#!/usr/bin/python3

import asyncio
import dataclasses

import httpx


@dataclasses.dataclass(frozen=True)
class Instance:
    uri: str
    act_users: int

    @staticmethod
    def get_active_users(d: dict) -> int:
        try:
            return d[1]['stats']['usage']['users']['activeMonth']
        except (TypeError, KeyError):
            return 0

    @staticmethod
    def get_uri(d: dict) -> str:
        uri: str = d[1]['uri']

        if uri.endswith('/'):
            return uri[:-1]
        else:
            return uri

    @classmethod
    def from_dict(cls, d: dict):
        return cls(cls.get_uri(d), cls.get_active_users(d))


@dataclasses.dataclass(frozen=True)
class InstanceAlive:
    instance: Instance
    alive: bool


def test_video_url(instance_url: str):
    return '%s/watch?v=%s' % (instance_url, "AO_UNZ13_6E")


def json_url() -> str:
    return 'https://api.invidious.io/instances.json'


async def parse_instances(client: httpx.AsyncClient) -> list[Instance]:
    response = await client.get(json_url())
    instances = []
    for entry in response.json():
        instance = Instance.from_dict(entry)
        if instance.act_users > 1:
            instances.append(instance)
    return instances


async def test_instance(client: httpx.AsyncClient, instance: Instance) -> InstanceAlive:
    try:
        response = await client.get(test_video_url(instance.uri))
    except (httpx.ConnectTimeout, httpx.ReadTimeout):
        return InstanceAlive(instance, False)
    else:
        return InstanceAlive(instance, response.status_code == 200)


async def filter_alive(client: httpx.AsyncClient, instances: list[Instance]) -> list[Instance]:
    result = await asyncio.gather(
        *(test_instance(client, instance) for instance in instances),
        return_exceptions=True
    )
    return [response.instance for response in result if isinstance(response, InstanceAlive) and response.alive]


async def main():
    async with httpx.AsyncClient(timeout=5) as client:
        instances = await parse_instances(client)
        instances = await filter_alive(client, instances)

    for instance in sorted(instances, key=lambda i: i.act_users):
        print(instance.uri, instance.act_users, sep='\t')


if __name__ == '__main__':
    asyncio.run(main())
