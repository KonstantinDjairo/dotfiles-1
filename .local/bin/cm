#!/usr/bin/env bash

# A collection of media editing scripts

readonly anki_username=$(xdotool search --class 'anki' |
			xargs -I{} xdotool getwindowname {} |
			grep -oP '^(.+)(?= - Anki$)')
# if set globally, respect the values
readonly OPUS_Q="${OPUS_Q:-32k}"
readonly WEBP_Q="${WEBP_Q:-5}"
readonly WEBP_RESIZE="${WEBP_RESIZE:-200}"
readonly COL_FOL="$HOME/.local/share/Anki2/${anki_username:-$USER}/collection.media"

_cwebp() { cwebp -blend_alpha '0xffffff' -alpha_q 0 -short -sharp_yuv -af -pass 10 -m 6 -mt -sns 100 -f 100 "$@"; }
_findall() { find . -mindepth 1 -maxdepth 1 -type f "$@" -print0; }
_xargs() { xargs -0 -P 8 -I {} "$@"; }

# Convert a file to webp, specify target size
stwebp() {
	[[ ! -f $1 ]] && return 1
	[[ $1 == *.gif ]] && unset -f _cwebp && _cwebp() { gif2webp -mt -lossy -m 6 -min_size -metadata none "$@";}
	_cwebp "$1" -o "$(basename -- "${1%.*}").webp" -resize 0 "${WEBP_RESIZE:?}" -q "${WEBP_Q:?}"
}

# Convert a file to webp, specify target quality
twebp() {
	[[ ! -f $1 ]] && return 1
	[[ $1 == *.gif ]] && unset -f _cwebp && _cwebp() { gif2webp -mt -lossy -m 6 -min_size -metadata none "$@";}
	_cwebp "$1" -o "$(basename -- "${1%.*}").webp" -q "${2:-$WEBP_Q}"
}

# Convert a file to ogg/opus
togg() {
	[[ ! -f $1 ]] && return 1
	ffmpeg -vn -nostdin -hide_banner -loglevel info -y -i "$1" \
	-acodec libopus -map_metadata -1 -ac 1 -ab "${2:-$OPUS_Q}" \
	-vbr on -compression_level 10 -application voip \
	-af silenceremove=1:0:-50dB "$(basename -- "${1%.*}").ogg"
}

# Can be added to ~/.config/Thunar/uca.xml
thunar_action_convert_to_webp() {
	command -v zenity || return 1
	local quality

	quality=$(zenity --scale --text="Quality" --value="5" \
		--min-value="0" --max-value="25" --step="1")

	[[ -z "$quality" ]] && quality=10

	twebp "$1" "$quality"
}

# Extract subs from MKV
extsub() { ffmpeg -nostdin -i "$1" "${1%.*}.en.ass" ;}

# Convert a folder to webp
ftwebp()  { _findall -iregex '.*.\(jpg\|jpeg\|png\|gif\)' | _xargs cm twebp  {} ;}

# Convert a folder to a small webp
ftswebp() { _findall -iregex '.*.\(jpg\|jpeg\|png\|gif\)' | _xargs cm stwebp {} ;}

# Convert a folder to ogg/opus
ftogg()   { _findall \( -name '*.mp3' -o -name '*.flac' -o -name '*.aac' \) | _xargs cm togg   {} ;}

fextsub() { _findall -name '*.mkv' | _xargs cm extsub {} ;}

check() {
	ls -1 ./*.mp3 ./*.jpg ./*.png
}

striptags() {
	find . -name '*.srt' -print0 | xargs -0 -I{} sed -i 's/<font[^>]*>//g;s/<\/font>//g' {}
}

# Convert youtube vtt subs to srt
ftsrt() {
	for file in ./*.vtt; do
		ffmpeg -nostdin -i  "$file" "$(basename -- "${file%.vtt}").srt"
	done
	rm -v ./*.vtt
}

# Manually edit audio file in Audacity, then move back to Anki collection
edit() {
	local -r filename="$(echo "$1" | sed 's/^\[sound://; s/\]$//')"
	local -r filepath="$COL_FOL/$filename"
	local -r workdir="/tmp/audacity"
	mkdir "$workdir"
	[[ -f $filepath ]] && cd "$workdir" || return 1

	audacity "$filepath" &>/dev/null

	if ! ls ./*.mp3; then
		echo "Aborted."
		return
	fi

	ftogg
	ls -1
	cp -v ./*.ogg "$COL_FOL"
	rm -rfv "$workdir"
}

# Move all files in the current directory to the anki collection
moveall() {
	mv -v ./* "$COL_FOL"
}

# Convert media files in a subs2srs folder and move them to the anki collection
doall() {
	mp3gain -f -q -r -k ./*.mp3
	cm ftogg
	cm ftswebp
	rm ./*.mp3
	rm ./*.jpg
	moveall
}

# Autorename files in the current dir
seqrename() {
	local i=1
	for file in ./*.*; do
		if [[ -f "$file" ]]; then
			mv -nv "$file" "$(printf -- '%010d' "${i}").${file##*.}"
			i=$((i+1))
		fi
	done
}

if [[ "$1" ]] && declare -f "$1" > /dev/null; then
	# call arguments verbatim
	"$@"
else
	# Show a helpful error
	echo "'${1-nothing}' is not a known function name" >&2
	echo "Available functions:"
	declare -F | cut -f3 -d' ' | grep '^[a-z]'
	exit 1
fi
